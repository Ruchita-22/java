



    Servlets:
   ===========

     Servlet is java technology is used to create dynamic webpages.

     Sevlet is an API

     Servlet is an interface   

     Servlet is class which runs on the webserver/applicationserver.
   
    Servlet is class which doesnot contain main method.
 



     servlet is api:
======================

   Api contains set of rules and guidelines inorder to develop a servelt class

    

     Application servers/webserver venodrs will provide implementations for 
    servlet Api.


       webserver:
============
      tomcat --  servelt-api.jar

       application servers:
---------------------

         weblogic
         websphere
         glassfish.....  
     

      
     1) Servelt is an interface available in javax.servlet.*
   ========================================================
     
     1) pubilc abstract init(ServletConfig config);
     2)public abstract  serivce(ServletRequest request,ServletResponse respone);
     3)public abstract destroy();
     4)public abstract ServletConfig getServletConfig();
     5) public abstract String getServletInfo();



    2) GenericServlet is abstract class which provide implementation for Servlet Interface.
    available in javax.servlet.*;

     they provide implementation for four methods except service() method.
   
    3) HttpServlet is abstract class which extends from GenericServlet class 
      javax.servlet.http.*;

       in this class they provide implementaion for service() method.
       
        service(HttpServletRequest request,HttpServletResponse response){}
         
        doGet(HttpServletRequest request,HttpServletResponse response){}
        doPost(HttpServletRequest request,HttpServletResponse response){}
        
        
       
     we can create a servlet class by using three ways:
 ==================================================

    1) create a class which provide implementation for servlet interface.
    2) create a servlet class which extends from GenericServlet and
       provide implementaion service() method.
    3)creata a servlet class which extends HttpServlet class and 
    overidde a method ...service,doPost,doGet...
    
    recommended is 3.

   
 
  WEBBASED PROJECT STRUCTURE:
===============================
   ===================================
       Example:
       ========

       1) create a servlet class which print welcome message.
    
        
   solu:
   ----
     1) create a dynamic web project in eclipse 
     2) create class named as WelcomeServlet extends from HttpServlet
    
     3) we need to configure this servlet class in web.xml
     using <servlet> and <servlet-mapping> tags


     4)we need to send the http request for your servlet class by passing this url

      syntax:  http://localhost:8000/<project-name>/<requested-resources>

   ex: http://localhost:8000/DemoProject/ws

     
     
          Servlet Lifcycle methods:
         ===========================
        1) init()   -- this method is executed only once

        2) service() -- for every request this method will be executed

        3) destroy() -- when  undeploy the project this method will be executed.


    servlet execution flow:
    =======================

    Http is a statless protocol.


      HttpRequestFormat:
      ==================
   
       1) initial requestline   --  requestmethod/requestURI/protocol or version 
                               ex :   Get / ws / Http or 1.1    

       2) headers     ---        user-gent,Accept-language      
      
       3) body        ----   no message append for Get method
    
    
     HttpResponeFormat
     ===================  

     1)initial response line ---   statuscode/status description/protocol

                              ex:   200    /ok / http or 1.1



     2) headers ---usergent ,Accept-language

     3) body  -- output will send through response object 
    
      
     
       
    statucodes -- description

    1xx -- simple messages

    2xx --  successful 

    3xx -- redirect messages

    4xx -- resource not found

    5xx -- resource is available but unable to execute


==========================================================================================

  2)  a html called  as employee.html which contains two text fields.
      then  create a servlet class(we need to write a code to get the form fields values 
        from  employee.html) and display these details on the browser.

   sOLU:
      
     1) employee.html
    ==================

       FirstName : <input tyrpe="text" name="fn" /><br>
       LastName : <input type="text" name="ln" /></br>
        <input type="submit" value="register"/>


     2)  create a servletClass which extends from HttpServlet


     public class EmployeeDetails extends HttpServlet{

       
     public doGet(HttpServletRequest request,HttpServletRespone response) throws
      IOExcetpion,ServletException{

       
            response.setContentType("text/html");

        PrintWriter out = response.getWriter();

  
       String fname =  request.getParameter("fn");
       String lname = request.getParameter("ln");


       out.println("EMployeeDetails: ")

       out.println("FirstName is :"+fname);
       out.println("LastName is :"+lname);l


     }





    }
    
    
    3) configure this servlet class in web.xml file.

      
     <servlet>
      <servlet-name>employee</servlet-name>
      <servlet-class>EmployeeDetails</servlet-class>
     </servlet>

     <servlet-mapping>
      <servlet-name>employee</servlet-name>
      <url-pattern>/ed</url-pattern>
     </servlet-mapping>



       Assginment
       ============

      1) Add drop down list,textarea field in employee.html

      2) get this form fields values from employee.html  to servlet 

      3) create a table in sql 
         employee table conatin (fname,lastname,gender,hobbies,state/country,textarea)
     
      4) Instead of displayin on the browser ,write a jdbc code to insert these
        form fields value into employee table.
         using preparedStatement.  type-4 driver or thin driver



      ServletConfig:
      ==============

       ServletConfig is interface available in the javax.servlet.*;


       
     Why ServletConfig:
      ==================

      To provide any additional information or extra information(jdbc information)  to your
      specific  servlet  then we need to go for servlet config object.

      1) if we want provide any additional information 
          we need configure that information in web.xml under servlet tag

          using <init-paramter> 
                  <param-name>drv</param-name>
                   <param-value>oracle.jdcb.driver.OracleDriver</param-value>
                </init-parameter>tag 
   
    
     2) to read this initparameter values inside your servlet class

        a) Get the servletConfig object

        ex:     
             ServletConfig config = getServletConfig();
 
     
    3)  get the initparameter values from web.xml using key in your servlets.

        syntax : config.getInitParameter("key");


       Ex . String driver = config.getInitParameter("drv");

    
      Example:
      ========
      1) create servletClass named as ExampleOnServletConfig
    
         write a code to read the init-parameter values which configured in web.xml
          under this servlet.

      2) Display those parameter values on the browser

         Driver:
         Url:
         UserName:
            

     
  
     ServletContext:
     ===============
     
       ServeltContext  is also interface available in javax.servelt.*;

 
     Why ServletContext:
      ==================

     To provide any additional information or extra information(jdbc information)  to your
     all servlets in your project  then we need to go for servlet context object.

      
    1) we need configure this informatio web.xml file using
        <context-param>
         <param-name>key<param-name>
        <param-value>value</param-value> tag after the <web-app> tag


    2) to get ServletContext object
      
       a) ServletContext application = getServletContext();

       b) by using config object

          ex: 

            ServletConfig config = getServeltConfig();

      
           ServletContext application = config.getServletContext();

    3) to read this context-paramter values in your servlets.

      syntax: application.getInitParameter("key");
          
      ex:
      ===
        application.getInitParameter("drv");
     
     
      Example:
      =========

      1) create a Dynamicweb project named as DemoOnServletContext


      2) Remove welcome filelist  tags in web.xml and

         configure 

         <context-param>
          <param-name></param-name>
          <param-value></param-value>
         </context-param>  --- configure three properties,drv,url and username


      3) create a servletclass named as ExampleOnServletContext

      write a code to get the context parameter values and display it on th browser
      using ServletContext object.

  
      Difference Between ServletContext object and ServletConfig
      ==========================================================

     
      RequestDispatcher:
      ================== 

  
       RequestDispatcher is used to dispatch the request from one resource to another
    
       i.e.,  servlet to another servlet
          servlet to jsp
          servlet to html...
      
       1)how to get request dispatcher object
    
       a) RequestDispatcher rd = request.getRequestDispatcher("requested-resource");
         rd.include(request,respone);
         rd.forward(request,response);

     
       b) using servletContext object

          ServletContext application = getServletContext();

         RequestDispatcher rd = application.getRequestDispatcher("/requested-resource");
         rd.include(request,respone);
         rd.forward(request,response);


       Example:
       ========

        

    Scoped variables:
    =================


    1) requestScope :
    -----------------

      a) to store the value or object in request object
        ================================================
        1) request.setAttribute("key",value)
     
       ex:
.
        request.setAttribute("username",uname)



       b)to retrive the object from the  request object:
      ================================================


       Object request.getAttribute("key");

     ex:
     ====
  
     String uname = (String) request.getAttribute("username");


      c) to remove or delete object from the request object.
     ========================================================

      boolean request.removeAttribute("key");
 
     ex:
      ---
   
       request.removeAttribute("username");

     


    2) sessionScope
    ================

       a) to store the value inside session object.


       HttpSession session = request.getSession(true);

        
      syntax:  session.setAttribute("key",value);
          
     ex:
     ---
          session.setAttribute("username",uname);


      b)to retrive the object from the  session object:
      ================================================

       HttpSession session = request.getSession(true);

       Object session.getAttribute("key");

     ex:
     ====
  
     String uname = (String) session.getAttribute("username");


      c) to remove or delete object from the session object.
     ========================================================
       
     HttpSession session = request.getSession(true);

      boolean session.removeAttribute("key");

      ex:
       ---
           session.removeAttribute("username");



   
    3) applicationScope:
       ------------------

        1) to store the values or object inside ServletContext object.

 
             ServletContext application = getServletContext();


            application.setAttribute("key",value);

               
           ex:
           ---
                application.setAttribute("username","admin");


      2) to retrive the values or object from ServletContext.


           synt:    Object application.getAttribute("key");
   
   
               ex:
                     String uname=(String) application.getAttribute("username");



      3) to remove the object from the ServletContext object.


             syntax:
             --------

                application.removeAttribute("key");
          

         ex:
         ----
           application.removeAttribute("username");
          
   

      

   1)basic servlet program
   2) Sending request through Employee.html
   3) Assignment textfield,drop down list,
       jdbc code to store in form fieldsvalues in employee table

   4) servletconfig
   5)servletcontext
   6)Difference between ServletConfig and serveltContext

   7) RequestDispatcher
   8) Scoped variables.

   

   Http: Hyper text transfer protocol

   Http is a stateless protocol 

   Http is a doesnt remember the conversations between the client 
   and the server.   

   i.e, every time client send the request to server, 
    it will treat as new request.

   to keep track all the converstions which done by the client
   we require session management tecnoques.

    Session Managment Techniques.
   =============================

      1)cookies
      2) Hidden variables
      3) URL Re-writing
      4)Session management
   
       
     1)Cookies:  
      ---------
       1) Cookie is  class available in javax.servelt.http.Cookie

         
         a) to store a cookie object inside a browser.


            Cookie ck = new Cookie("key","value");

    
            response.add(ck);


       b)  to read the cookie object from the browser

   
             Cookie ck1[] = request.getCookies();

 
                  ck1[].getName() ....key 


                 ck1[].getValue() -----value



 
   2)Hidden Variables:
    ==================
  
      to store the data  
      ==================
   
      <input type="hidden" value="" name=""/>
    
   
     ---
        
      
      3) Session:
      ===========
      
           HttpSession is an interface available in javax.servlet.http.*

 
           1)HttpSession  session = request.getSession();

    
           2) HttpSession session = request.getSession(boolean);
        
              a) HttpSession session = request.getSession(true);

              b) HttpSession session = request.getSession(false);


            to add a object:
           ==================

            session.setAttribute("key","values");   
         
       
           to retrieve object:
            ===================

            Object  session.getAttribute("key");


          methods:
          --------

           1) getId();
           2)getCreationTime();
           3)getLastAccessedTime();
           4)invalidate()---- to remove session object from the server


     
        How many ways session is removed:
        =================================


       1) void setMaxInactiveInterval(int milli..seconds ) ---

       ex:
        ----

         session.setMaxInactiveInterval(10)

           
       2)session.invalidate() will be called when click on logout button.
         


       3)By configure the session time period in web.xml

         <session-config>
           <session-timeout>60</session-timeout>
         </session-config>
              
        
       4)By default it will use session-config time period of
          tomcat-server  web.xml

          

      
        4) urlRewriting:
         ===============

           We will send the request from one servlet to another
          by using queryString


     syntax:
     ======= 
       
   <a href="<url-patternof-servelt>?<key>=<value>&<key>=<value>">
    any message</a>       
            
    
      Tmrw:
      -----
      1)Difference  between cookies/hidden variables
      2)difference between session/URl-Rewriting
       3)Difference between rd.include() and rd.forward
      
       4)response.sendRedirec();

      5) Difference between  RequestDispatcher and response.sendRedirect()

       6) <load-on-startup>positive value</load-on-starup>tag  --
            
       7)Filters
       8)EventListeners

       
      =====================================================================

       Events and Listeners
       =====================

       Event  :- When is raised when click on  a button.

        Action  will be raised.


     
    ServletContext
    Request
    Session


   1) to  keep track of when request,context and session is created, modified
       destroyed.

    EventListeners

   1)ServeltContextListener
    ServeltContextEvent

   
   2)HttpSessionListener
     HttpSessionEvent

   3)ServeltRequestListener
     ServeltRequestEvent

   
   4)ServeltContextAttributeListener
     ServeltContextAttributeEvent
       
    this event is raised when we store object into ServletContext object(application)

      ServeltContextAttributeListener is interface three abstract methods.

      1)attributeAdded(ServeltContextAttributeEvent sce);
      2)attributeReplaced(ServeltContextAttributeEvent sce);
      3)atrributeRemoved(ServeltContextAttributeEvent sce);
        

   5)HttpSessionAttributeListener
     HttpSessionBindingEvent

   this event is raised when we store objects into session object
     
   HttpSessionAttributeListener is an interface three abstract methods

     1)attributeAdded(HttpSessionBindingEvent hse);
      2)attributeReplaced(HttpSessionBindingEvent hse);
      3)atrributeRemoved(HttpSessionBindingEvent hse);
        

   6)ServeltRequestAttributeListener
     ServeltRequestAttributeEvent 

    this event is raised when we store objects in requestScope object

    ServeltRequestAttributeListener is an interface three abstract methods

       1)attributeAdded(ServeltRequestAttributeEvent  sre);
      2)attributeReplaced(ServeltRequestAttributeEvent  sre);
      3)atrributeRemoved(ServeltRequestAttributeEvent sre);


  ServeltFilter:
  ==============

  Filter is an interface

   1)init(FilterConfig)
   2)doFilter(HttpServeltRequest req,HttpServeltReponse res,
          FilterChain chain)
   3)destroy();
    
    life cycle methods of filter


   Filter is used for pre-processing and post-processing  of your servelt
   request
 
   Why filter ?
   ============

   Login authentication   --  Logger4j
   Transaction management  --  Transaction Api
   Security               ---- webservices --REst APi

    
   we need to confgure this filter class in web.xml

   <filter>
    <filter-name></filter-name>
    <filter-class></filter-class>
   </filter>

    <filter-mapping>
    <filter-name></filter-name>
    <url-pattern>servelt-url-pattern</url-pattern>
   </filter-mapping>


   




     
   
  In how manys the server will create servlet object.

  1)by type the url and request for the servlet using url-pattern
  2)click on anchor tag
  3)Click on submit button
  4)<load-on-startup>positive value</load-startup>
    under web.xml after servlet-class tags
  
  
   suppose i have 10 servelt

       <load-on-startup>1</load-on-startup> -1servelt
       <load-on-startup>5</load-on-startup> -2 servelt
        <load-on-startup>3</load-on-startup> -3 servlet
 
       <load-on-startup>4</load-on-startup> -4 servlet
        
     Priority ascending  to descending
   
   if i will negative value
     
       <load-on-startup>-1</load-on-startup> -4 servlet 
   ---it will ignore the value

     <load-on-startup>0</load-on-startup>----


  note:
   ====
    object is created at the time of depolyment using <load-on-startup></load-on-startup>

   
   
  


     
     
   
      
   
        
   
       
       
       
               

        






















    
    

   